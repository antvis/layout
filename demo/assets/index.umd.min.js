!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).graphlib={})}(this,(function(e){"use strict";function t(e,t){for(var n=0;t.length>n;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(a=void 0,"symbol"==typeof(a=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(r.key,"string"))?a:a+""),r)}var a}function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,i,o,d=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(d.push(r.value),d.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw a}}return d}}(e,t)||a(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);t>n;n++)r[n]=e[n];return r}function o(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=a(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return e.length>r?{done:!1,value:e[r++]}:{done:!0}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,d=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return d=e.done,e},e:function(e){s=!0,o=e},f:function(){try{d||null==n.return||n.return()}finally{if(s)throw o}}}}e.Graph=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.nodeMap=new Map,this.edgeMap=new Map,this.inEdgesMap=new Map,this.outEdgesMap=new Map,this.treeIndices=new Map,this.changes=[],this.batchCount=0,this.onChanged=function(){},this.batch=function(e){n.batchCount+=1,e(),n.batchCount-=1,n.batchCount||n.commit()},t&&(t.nodes&&this.addNodes(t.nodes),t.edges&&this.addEdges(t.edges),t.tree&&this.addTree(t.tree),t.onChanged&&(this.onChanged=t.onChanged))}var a,i,d;return a=e,(i=[{key:"commit",value:function(){var e=this.changes;this.changes=[],this.onChanged({graph:this,changes:e})}},{key:"mergeChanges",value:function(e){throw Error("To be implemented")}},{key:"checkNodeExistence",value:function(e){if(!this.hasNode(e))throw Error("Node not found for id: "+e)}},{key:"hasNode",value:function(e){return this.nodeMap.has(e)}},{key:"getNode",value:function(e){return this.checkNodeExistence(e),this.nodeMap.get(e)}},{key:"getRelatedEdges",value:function(e,t){this.checkNodeExistence(e);var n=this.inEdgesMap.get(e),a=this.outEdgesMap.get(e);if("in"===t)return Array.from(n);if("out"===t)return Array.from(a);var i=new Set([].concat(r(n),r(a)));return Array.from(i)}},{key:"getSuccessors",value:function(e){var t=this,n=this.getRelatedEdges(e,"out").map((function(e){return e.target}));return Array.from(new Set(n)).map((function(e){return t.getNode(e)}))}},{key:"getPredecessors",value:function(e){var t=this,n=this.getRelatedEdges(e,"in").map((function(e){return e.source}));return Array.from(new Set(n)).map((function(e){return t.getNode(e)}))}},{key:"getNeighbors",value:function(e){var t=this.getPredecessors(e),n=this.getSuccessors(e);return Array.from(new Set([].concat(r(t),r(n))))}},{key:"doAddNode",value:function(e){if(this.hasNode(e.id))throw Error("Node already exists: "+e.id);this.nodeMap.set(e.id,e),this.inEdgesMap.set(e.id,new Set),this.outEdgesMap.set(e.id,new Set),this.treeIndices.forEach((function(t){t.childrenMap.set(e.id,new Set)})),this.changes.push({type:"NodeAdded",value:e})}},{key:"addNodes",value:function(e){var t=this;this.batch((function(){var n,r=o(e);try{for(r.s();!(n=r.n()).done;)t.doAddNode(n.value)}catch(e){r.e(e)}finally{r.f()}}))}},{key:"addNode",value:function(e){this.addNodes([e])}},{key:"doRemoveNode",value:function(e){var t=this,n=this.getNode(e),r=this.inEdgesMap.get(e),a=this.outEdgesMap.get(e);null==r||r.forEach((function(e){return t.doRemoveEdge(e.id)})),null==a||a.forEach((function(e){return t.doRemoveEdge(e.id)})),this.nodeMap.delete(e),this.treeIndices.forEach((function(t){var n;null===(n=t.childrenMap.get(e))||void 0===n||n.forEach((function(e){t.parentMap.delete(e.id)})),t.parentMap.delete(e),t.childrenMap.delete(e)})),this.changes.push({type:"NodeRemoved",value:n})}},{key:"removeNodes",value:function(e){var t=this;this.batch((function(){e.forEach((function(e){return t.doRemoveNode(e)}))}))}},{key:"removeNode",value:function(e){this.removeNodes([e])}},{key:"updateNodeData",value:function(e,t,n){var r=this,a=this.getNode(e);this.batch((function(){var i=a.data[t],o=n;a.data[t]=o,r.changes.push({type:"NodeDataUpdated",id:e,propertyName:t,oldValue:i,newValue:o})}))}},{key:"mergeNodeData",value:function(e,t){var r=this;this.batch((function(){Object.entries(t).forEach((function(t){var a=n(t,2);r.updateNodeData(e,a[0],a[1])}))}))}},{key:"checkEdgeExistence",value:function(e){if(!this.hasEdge(e))throw Error("Edge not found for id: "+e)}},{key:"hasEdge",value:function(e){return this.edgeMap.has(e)}},{key:"getEdge",value:function(e){return this.checkEdgeExistence(e),this.edgeMap.get(e)}},{key:"getEdgeDetail",value:function(e){var t=this.getEdge(e);return{edge:t,source:this.getNode(t.source),target:this.getNode(t.target)}}},{key:"doAddEdge",value:function(e){if(this.hasEdge(e.id))throw Error("Edge already exists: "+e.id);this.checkNodeExistence(e.source),this.checkNodeExistence(e.target),this.edgeMap.set(e.id,e);var t=this.inEdgesMap.get(e.target),n=this.outEdgesMap.get(e.source);t.add(e),n.add(e),this.changes.push({type:"EdgeAdded",value:e})}},{key:"addEdges",value:function(e){var t=this;this.batch((function(){var n,r=o(e);try{for(r.s();!(n=r.n()).done;)t.doAddEdge(n.value)}catch(e){r.e(e)}finally{r.f()}}))}},{key:"addEdge",value:function(e){this.addEdges([e])}},{key:"doRemoveEdge",value:function(e){var t=this.getEdge(e),n=this.outEdgesMap.get(t.source),r=this.inEdgesMap.get(t.target);n.delete(t),r.delete(t),this.edgeMap.delete(e),this.changes.push({type:"EdgeRemoved",value:t})}},{key:"removeEdges",value:function(e){var t=this;this.batch((function(){e.forEach((function(e){return t.doRemoveEdge(e)}))}))}},{key:"removeEdge",value:function(e){this.removeEdges([e])}},{key:"updateEdgeSource",value:function(e,t){var n=this,r=this.getEdge(e),a=r.source,i=t;this.outEdgesMap.get(a).delete(r),this.outEdgesMap.get(i).add(r),r.source=t,this.batch((function(){n.changes.push({type:"EdgeUpdated",id:e,propertyName:"source",oldValue:a,newValue:i})}))}},{key:"updateEdgeTarget",value:function(e,t){var n=this,r=this.getEdge(e),a=r.target,i=t;this.inEdgesMap.get(a).delete(r),this.inEdgesMap.get(i).add(r),r.target=t,this.batch((function(){n.changes.push({type:"EdgeUpdated",id:e,propertyName:"target",oldValue:a,newValue:i})}))}},{key:"updateEdgeData",value:function(e,t,n){var r=this,a=this.getEdge(e);this.batch((function(){var i=a.data[t],o=n;a.data[t]=o,r.changes.push({type:"EdgeDataUpdated",id:e,propertyName:t,oldValue:i,newValue:o})}))}},{key:"mergeEdgeData",value:function(e,t){var r=this;this.batch((function(){Object.entries(t).forEach((function(t){var a=n(t,2);r.updateEdgeData(e,a[0],a[1])}))}))}},{key:"checkTreeExistence",value:function(e){if(!this.treeIndices.has(e))throw Error("Tree structure not found for treeKey: "+e)}},{key:"attachTreeStructure",value:function(e){var t=this;this.treeIndices.has(e)||(this.treeIndices.set(e,{parentMap:new Map,childrenMap:new Map}),this.batch((function(){t.changes.push({type:"TreeStructureAttached",treeKey:e})})))}},{key:"detachTreeStructure",value:function(e){var t=this;this.checkTreeExistence(e),this.treeIndices.delete(e),this.batch((function(){t.changes.push({type:"TreeStructureDetached",treeKey:e})}))}},{key:"addTree",value:function(e,t){var n=this;this.batch((function(){n.attachTreeStructure(t);for(var a=[],i=Array.isArray(e)?e:[e];i.length;){var o=i.shift();a.push(o),o.children&&i.push.apply(i,r(o.children))}n.addNodes(a),a.forEach((function(e){var r;null===(r=e.children)||void 0===r||r.forEach((function(r){n.setParent(r.id,e.id,t)}))}))}))}},{key:"getRoots",value:function(e){var t=this;return this.checkTreeExistence(e),this.getAllNodes().filter((function(n){return!t.getParent(n.id,e)}))}},{key:"getChildren",value:function(e,t){this.checkNodeExistence(e),this.checkTreeExistence(t);var n=this.treeIndices.get(t).childrenMap.get(e);return Array.from(n||[])}},{key:"getParent",value:function(e,t){return this.checkNodeExistence(e),this.checkTreeExistence(t),this.treeIndices.get(t).parentMap.get(e)||null}},{key:"setParent",value:function(e,t,n){var r=this;this.checkTreeExistence(n);var a,i=this.treeIndices.get(n),o=this.getNode(e),d=i.parentMap.get(e),s=this.getNode(t);i.parentMap.set(e,s),d&&(null===(a=i.childrenMap.get(d.id))||void 0===a||a.delete(o));var u=i.childrenMap.get(s.id);u||(u=new Set,i.childrenMap.set(s.id,u)),u.add(o),this.batch((function(){r.changes.push({type:"TreeStructureChanged",treeKey:n,nodeId:e,oldParentId:null==d?void 0:d.id,newParentId:s.id})}))}},{key:"getAllNodes",value:function(){return Array.from(this.nodeMap.values())}},{key:"getAllEdges",value:function(){return Array.from(this.edgeMap.values())}},{key:"bfs",value:function(e,t){throw Error("To be implemented")}},{key:"dfs",value:function(e,t){throw Error("To be implemented")}},{key:"clone",value:function(){var t=new e({nodes:this.getAllNodes(),edges:this.getAllEdges(),onChanged:this.onChanged});return t.treeIndices=new Map,t.treeIndices=this.treeIndices,t}},{key:"toJSON",value:function(){return JSON.stringify({nodes:this.getAllNodes(),edges:this.getAllEdges()})}}])&&t(a.prototype,i),d&&t(a,d),Object.defineProperty(a,"prototype",{writable:!1}),e}(),Object.defineProperty(e,"__esModule",{value:!0})}));
